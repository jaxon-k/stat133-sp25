---
title: "Lab-7: Iterations and S&P 500 Data"
format: 
  html:
    toc: true
    number-sections: true
    theme: zephyr
embed-resources: true
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
old = options(pillar.sigfig = 5)  # to display decimals
```

::: {.callout-note icon="false"}
## General Instructions

-   Use the template file `lab07-template.qmd` to answer the questions.

-   Rename this file as `lab07-first-last.qmd`, where `first` and `last`
    are your first and last names (e.g. `lab07-gaston-sanchez.qmd`).

-   Make sure the YAML header in your `qmd` files includes
    `embed-resources: true`

-   Submit both your qmd and HTML files to the corresponding assignment
    submission in bCourses.

-   Please note that if you submit the incorrect files you will receive
    no credit.
:::

```{r message=FALSE}
# packages
library(tidyverse)  # pkgs for data science
library(lubridate)  # for working with dates
library(tidyquant)  # financial & quant functions
```

------------------------------------------------------------------------

## Investment with variable rates of return {#sec-for-loop1}

Suppose Gaston decides to invest a lump sum in some financial product
that tracks the performance of a certain stock market index (e.g. S&P
500). To make things more concrete, let's assume that he invests
\$10,000 at the beginning of a certain year. How much money would he
have at the end of five years?

The answer to this question comes from the iterative process described
below.

Let $initial = \$10000$ be the lump sum (invested at the beginning of
some year).

Let $r_t$ be the rate of return in year $t = 1, 2, \dots, 5$.

Let $bal_t$ be the balance amount at the end of year
$t = 1, 2, \dots, 5$.

**Iterative process:**

-   Balance at the end of year 1:
    $\quad bal_1 = initial \times (1 + r_1)$

-   Balance at the end of year 2: $\quad bal_2 = bal_1 \times (1 + r_2)$

-   Balance at the end of year 3: $\quad bal_3 = bal_2 \times (1 + r_3)$

-   Balance at the end of year 4: $\quad bal_4 = bal_3 \times (1 + r_4)$

-   Balance at the end of year 5: $\quad bal_5 = bal_4 \times (1 + r_5)$

\

Consider the following (hypothetical) annual rates of return:

```{r}
# hypothetical annual rates of return
r = c('y1' = 0.02, 
      'y2' = 0.07, 
      'y3' = -0.05, 
      'y4' = 0.13, 
      'y5' = -0.03)

r
```

Here's a naive approach to compute the balance amounts at the end of
every year.

```{r}
# ==============================================
# Naive approach (just for sake of illustration)
# Don't write code like this (use loops instead)
# ==============================================

# lump sum (initial amount)
initial = 10000

# annual balance values
bal_1 = initial * (1 + r[1]) # end of year 1
bal_2 = bal_1 * (1 + r[2])   # end of year 2
bal_3 = bal_2 * (1 + r[3])   # end of year 3
bal_4 = bal_3 * (1 + r[4])   # end of year 4
bal_5 = bal_4 * (1 + r[5])   # end of year 5

# store in a vector 'balance'
balance = c(bal_1, bal_2, bal_3, bal_4, bal_5)
names(balance) = paste0('y', 1:5)
balance
```

### Example: Using a `for()` loop {#sec-for-loop2}

We can implement the previous iterative process with the following
`for()` loop. Keep in mind that the code below is fairly verbose because
of all the comments added to provide clear descriptions. In practice,
you won't really need to add that many comments.

```{r}
# lump sum (initial amount)
initial = 10000

# output vector, initialized full of zeros
# (to be updated through each iteration)
balance = rep(0, length(r))

# first balance is the one at the end of year 1
balance[1] = initial * (1 + r[1])

# iterations (from year-2 to year-5)
for (y in 2:5) {
  # compute new balance value
  balance[y] = balance[y-1] * (1 + r[y])
}

# assemble results in a tibble
balance_tbl = tibble(
  'year' = 1:5,
  'balance' = balance
)

balance_tbl
```

\

## Your Turn: 10-year Investment

Consider the following vector `rr` of random annual rates of return for
a ten year period:

```{r}
set.seed(12345) # for replication purposes

# random rates
rr = round(rnorm(n = 10, mean = 0.10, sd = 0.18), 2)
names(rr) = paste0('y', 1:10)
rr
```

a)  **Loop:** With the above random rates, and assuming a lump sum of
    $10,000$, write code to implement a `for()` loop that computes the
    balance at the end of each year. Display the output in a tibble
    `balance_tbl2` with columns `year` and `balance`.

```{r}
# your code
n = length(rr)
balance = rep(10000, n)

balance [1] = balance[1]*(1+rr[1])

for (y in 2:n) {
  balance[y] = balance[y - 1]*(1 + rr[y])
}

balance_tbl2 = tibble(
  'year' = 1:n,
  'balance' = balance
)

balance_tbl2
```

\

b)  **Graphic:** Refer to your table `balance_tbl2`. Use `ggplot`
    commands to visualize the balance amounts over time.

```{r}
# your code
ggplot(balance_tbl2) +
  geom_line(aes(x = year, y = balance)) +
  labs(title = "Annual Return on Stocks Over 10 Period",
       subtitle = "For 2014 - 2024!") + theme_bw()
```

------------------------------------------------------------------------

## Analyzing returns of S&P500 Index

Let's now use real rates of return from the S&P 500 stock market index.
In this part we'll carry out two analyses:

A simple exploratory analysis of S&P 500 Index annual returns.

Annual returns of a hypothetical investment that tracks the performance
of the S&P 500, over some number of years.

### What is the S&P 500?

According to wikipedia, <https://en.wikipedia.org/wiki/S%26P_500>:

> The **Standard and Poor's 500**, or simply the **S&P 500**, is a stock
> market index tracking the stock performance of 500 of the largest
> companies listed on stock exchanges in the United States. It is one of
> the most commonly followed equity indices and includes approximately
> 80% of the total market capitalization of U.S. public companies, with
> an aggregate market cap of more than \$43 trillion as of January 2024

### Examples of Investments tracking the S&P 500

According to Wikipedia, <https://en.wikipedia.org/wiki/S%26P_500>:

> Index funds, including mutual funds and exchange-traded funds (ETFs),
> can replicate, before fees and expenses, the performance of the index
> by holding the same stocks as the index in the same proportions.

Examples of ETF's that replicate the performance of the index are:

-   Vanguard's: VOO
-   iShares: IVV
-   State Street Corporation: SPY

------------------------------------------------------------------------

## S&P 500 Historical daily data in 2023

To get S&P 500 data we are going to use the function `tq_get()` from the
package `"tidyquant"`. This function allows you to get historical
(daily) data based on a given ticker symbol: e.g. `"^GSPC"` (S&P500
index).

For instance, here's how to get the daily data from year 2023:

```{r}
sp500_2023 = tq_get("^GSPC", from = "2023-01-01", to = "2023-12-31")
```

Once we have downloaded the data, we can take a look at its `head()` and
`tail()`:

```{r}
# first 5 rows
head(sp500_2023, n = 5)

# last 5 rows
tail(sp500_2023, n = 5)
```

### Description of Columns

-   `symbol`: Name of ticker symbol.

-   `date`: Date of the trade session (yyyy-mm-dd). Keep in mind that
    the major stock market exchanges in the U.S. are open only during
    weekdays (M-F from 9:30am to 4pm ET), excluding holidays.

-   `open`: Value at which trade of the index starts at the beginning of
    the trade session.

-   `high`: Highest value at which the index has traded during a trade
    session.

-   `low`: Lowest value at which the index has traded during a trade
    session.

-   `close`: Value at which the index has traded at the end of the trade
    session.

-   `volume`: Measures the number of shares traded.

-   `adjusted`: Adjusted closing value. Note: **ignore this column**.

::: {.callout-note icon="false"}
## Important Note

If you download more historical data, you'll notice some issues:

-   Before 1962, all data in columns `open`, `high`, `low` and `close`
    contain the same value.

-   Only in 1962 do `high`, `low`, and `close` start to differ (with
    `open` being 0).

The main explanation for these issues is related to the use of
computerized order-recording of trades which started to emerge in the
early sixties.
:::

### Your Turn: Timeline of S&P-500 in 2023

With `sp500_2023`, use ggplot commands to make a graphic that lets you
visualize a timeline for this stock market index.

-   Map `date` to the x-axis.
-   Map `close` to the y-axis.
-   Use a `geom_line()` layer.
-   Add a smoother---via `geom_smooth()`---to see the annual trend.
-   Include a title.

```{r}
# your code
ggplot(sp500_2023, aes(x = date, y = close)) + 
  geom_line() +
  geom_smooth() +
  labs(title = "Value of S&P500 in 2023")
```

------------------------------------------------------------------------

## A few functions to manipulate Dates

To continue our exploratory analysis of the downloaded data, first we
need to review some useful operations---and functions behind them---to
work with **dates** in R.

The `"lubridate"` package comes with a large number of useful functions
that let you handle dates. Let's review the following:

-   `year(x)`: extracts the year of a date `x`

-   `month(x)`: extracts the month of a date `x`

-   `day(x)`: extracts the day of a date `x`

-   `wday(x, label)`: extracts the week-day (either number or name) of a
    date `x`

-   `floor_date(x, unit)`: floor method for a date `x`

-   `ceiling_date(x, unit)`: ceiling method for a date `x`

### Example with functions `year()` and `floor_date()`

Here's a toy example of what `year()` and `floor_date()` do to date
values:

```{r}
# demo of some lubridate functions
sp500_2023 |>
  slice(1:5) |>
  select(date) |>
  mutate(
    year = year(date),
    floor = floor_date(date, unit = 'month')
  )
```

### Your Turn: Apply more lubridate functions

Like in the previous example, use `mutate()` to see what functions
`month(x)`, `day(x)`, `wday(x)`, `wday(x, label = TRUE)`, and
`ceiling_date(x, unit = 'month')` do on a date `x`.

```{r}
# your code
sp500_2023 |>
  slice(1:5) |>
  select(date) |>
  mutate(
    month(date),
    day(date),
    wday(date),
    wday(date, label = TRUE),
    ceiling = ceiling_date(date, unit = 'month')
  )
```

------------------------------------------------------------------------

## Computing Returns

Having reviewed some `"lubridate"` functions, let's now talk about
computing returns. Because we are going to focus on market returns, this
means we need to be able to calculate returns between different dates.

**How to compute returns?** Assume you have an asset with a price (or
value) $p_1$ at time $t_1$, and another price (or value) $p_2$ at a
later time $t_2$. The return $r$ in the time period between $t_1$ and
$t_2$ is given by:

$$
r = \frac{p_2 - p_1}{p_1}
$$

For example, say you invest \$100 today (time $t_1$) and a year from now
you sell your investment for \$150 (time $t_2$). The annual return on
your investment will be 50%:

$$
r = \frac{150 - 100}{100} = \frac{50}{100} = 0.5 = 50\%
$$

Alternatively, say you invest \$100 today (time $t_1$) and a year from
now you sell your investment for \$70 (time $t_2$). The annual return on
your investment will be -30%:

$$
r = \frac{70 - 100}{100} = \frac{-30}{100} = -0.3 = -30\%
$$

### Example: Return in January (2023)

Say we are interested in computing the return during the month of
January 2023. To do this we need the first opening value of the month
(3853.29, Jan-03) and the last closing value of the month (4076.6,
Jan-31):

$$
\text{return}_{Jan} = \frac{4076.6 - 3853.29}{3853.29} \approx 0.0579
$$

How can we get the **first** `open` value and the **last** `close`
value? Meet `"dplyr"` functions `first()` and `last()`:

```{r}
sp500_2023_january_return = sp500_2023 |>
  mutate(month = month(date)) |> 
  filter(month == 1) |>
  summarise(
    first = first(open),
    last = last(close),
    return = (last - first) / first)

sp500_2023_january_return
```

### Your Turn: Annual Returns 2014-2023

Use dplyr `tq_get()` to download S&P 500 data from `"2014-01-01"` to
`"2023-12-31"`

```{r}
# your code
sp500_2014_2023 = tq_get("^GSPC", from = "2014-01-01", to = "2023-12-31")
```

Use dplyr commands to compute annual returns from 2014 to 2023. Name
this table `sp500_2014_2023_annual_returns`, and display its contents.

```{r}
# your code
sp500_1928_2024_annual_returns = sp500_2014_2023 |> 
  mutate(year = year(date)) |>
  group_by(year) |>
  summarize(
    first = first(high),
    last = last(close),
    return = (last - first)/first
  )

sp500_2014_2023_annual_returns
```

------------------------------------------------------------------------

## Performance of Gaston's Investment

Suppose Gaston decides to invest in some financial product that tracks
the performance of the S&P 500 index. Specifically, he invests a lump
sum of \$10000 at the beginning of 2014.

**How much money would he have at the end of 2023?**

### Your Turn: For Loop {#sec-for-loop}

a)  Write a `for` loop to compute the annual balance of Gaston's
    investment. Store these values in a vector `balance`.

```{r}
# your code
n = 11

balance = rep(10000, n)

for (y in 2:n) {
  return = sp500_2014_2023_annual_returns$return[y - 1]
  balance[y] = balance[y - 1]*(1 + return)
}

balance = balance[-1]
```

<br>

b)  Once you obtain `balance`, create a table `investment_2014_2023`
    (e.g. you can use a tibble or a data.frame) with columns `year`,
    `return`, and `balance`. When printing `investment_2014_2023`, it
    should look like the following table (a few rows displayed).

```         
year       return   balance
2014  0.115414993  11154.15
2015 -0.007265997  11073.10
2016  0.098434958  12163.08
...
```

```{r}
# your code
investment_2014_2023 = tibble(
  'year' = 2014:2023,
  'return' = sp500_2014_2023_annual_returns$return,
  'balance' = balance
)
```

<br>

c)  With `investment_2014_2023`, use ggplot commands to make a timeline
    that lets you visualize the monthly balance amounts.

```{r}
# your code
ggplot(investment_2014_2023, aes(x = year, y = balance)) + 
  geom_line() +
  labs(title = "Value of Gaston's Investment from 2014-2023") + 
  theme_bw()
```
