---
title: "Lab-1: Getting started with R and RStudio"
subtitle: "Stat 133"
format: 
  html:
    toc: true
    number-sections: true
    theme: zephyr
embed-resources: true
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
```

# R and RStudio

-   You should have installed **R**
    -   R for Mac: <https://cran.r-project.org/bin/macosx/>
    -   R for windows: <https://cran.r-project.org/bin/windows/base/>
-   You should also have installed **RStudio**
    -   RStudio download:
        <https://www.rstudio.com/products/rstudio/download/>
-   R and RStudio are two different things
    -   R is both a software and language (like python, matlab, julia,
        etc)
    -   R comes with its minimal Graphical User Interface (R-GUI), but
        we won't use this.
    -   Instead, we are going to use RStudio as our main working
        environment.
    -   RStudio is much more than a simple GUI; RStudio is technically
        an *Integrated Development Environment* (IDE).
    -   We are going to use mainly RStudio, which provides a nice
        working environment and development framework.

------------------------------------------------------------------------

# R as a scientific calculator

Launch RStudio and notice the default position of the panes (or panels):

-   Console (entire left)
-   Environment/History (tabbed in upper right)
-   Files/Plots/Packages/Help (tabbed in lower right)

**FYI:** you can change the default location of the panes, among many
other things: [Customizing
RStudio](https://support.rstudio.com/hc/en-us/articles/200549016-Customizing-RStudio).
If you have no experience working with R/RStudio, you don't have to
customize anything right now. It's better if you wait some days until
you get a better feeling of the working environment. You will probably
be experimenting (trial and error) some time with the customizing
options until you find what works for you.

## First contact with the R console

If you have never used software in which you have to type commands and
code, our best suggestion is that you begin typing basic things in the
**console**, using R as a scientific calculator.

For instance, consider the monthly bills of Leia (a fictitious stats
undergrad student):

-   cell phone \$80
-   transportation \$20
-   groceries \$527
-   gym \$10
-   rent \$1500
-   other \$83

You can use R to find Leia's total expenses by typing these commands in
the console:

```{r}
# total expenses
80 + 20 + 527 + 10 + 1500 + 83
```

Often, it will be more convenient to create **objects** or **variables**
that store one or more values. To do this, type the name of the
variable, followed by the assignment operator `<-`, followed by the
assigned value. For example, you can create an object `phone` for the
cell phone bill, and then inspect the object by typing its name:

```{r}
# objects with assigned values
phone <- 80
phone
```

All R statements where you create objects are known as "assignments",
and they have this form:

``` r
object <- value
```

this means you assign a `value` to a given `object`; you can read the
previous assignment as "phone gets 80".

RStudio has a keyboard shortcut for the arrow operator `<-`: `Alt` + `-`
(the minus sign).

Notice that RStudio automagically surrounds `<-` with spaces, which
demonstrates a useful code formatting practice. So do yourself (and
others) a favor by ALWAYS surrounding an assignment operator with
spaces.

Alternatively, you can also use the equals sign `=` as an assignment
operator:

```{r}
coffee = 30
coffee
```

You will be working with RStudio a lot, and you will have time to learn
most of the bells and whistles RStudio provides. Think about RStudio as
your "workbench". Keep in mind that RStudio is NOT R. RStudio is an
environment that makes it easier to work with R, while taking care of
many of the little tasks than can be a hassle.

## Object Names

There are certain rules you have to follow when creating objects and
variables. Object names cannot start with a digit and cannot contain
certain other characters such as a comma or a space. You will be wise to
adopt a convention for demarcating words in names.

``` r
i_use_snake_case
other.people.use.periods
evenOthersUseCamelCase
```

The following are invalid names (and invalid assignments)

```         
# cannot start with a number
5variable <- 5

# cannot start with an underscore
_invalid <- 10

# cannot contain comma
my,variable <- 3

# cannot contain spaces
my variable <- 1
```

This is fine but a little bit too much:

``` r
this_is_a_really_long_name <- 3.5
```

## Functions

R has many functions. To use a function type its name followed by
parenthesis. Inside the parenthesis you pass an input. Most functions
will produce some type of output:

``` r
# absolute value
abs(10)
abs(-4)

# square root
sqrt(9)

# natural logarithm
log(2)
```

## Comments in R

All programming languages use a set of characters to indicate that a
specifc part or lines of code are **comments**, that is, things that are
not to be executed. R uses the hash or pound symbol `#` to specify
comments. Any code to the right of `#` will not be executed by R.

``` r
# this is a comment
# this is another comment
2 * 9

4 + 5  # you can place comments like this
```

## Case Sensitive

R is case sensitive. This means that `phone` is not the same as `Phone`
or `PHONE`

```{r}
# case sensitive
phone <- 80
Phone <- -80
PHONE <- 8000

phone + Phone
PHONE - phone
```

------------------------------------------------------------------------

# Installing Packages

R comes with a large set of functions and packages. A package is a
collection of functions that have been designed for a specific purpose.
One of the great advantages of R is that many analysts, scientists,
programmers, and users can create their own packages and make them
available for everybody to use them. R packages can be shared in
different ways. The most common way to share a package is to submit it
to what is known as **CRAN**, the *Comprehensive R Archive Network*.

You can install a package using the `install.packages()` function. To do
this, we recommend that you run this command directly on the console. Do
NOT include this command in a code chunk of an Rmd file: you will very
likely get an error message when knitting the Rmd file.

To use `install.packages()` just give it the name of a package,
surrounded by quotes, and R will look for it in CRAN, and if it finds
it, R will download it to your computer.

``` r
# installing (run this on the console!)
install.packages("knitr")
```

You can also install a bunch of packages at once:

``` r
# run this command on the console!
install.packages(c("readr", "ggplot2"))
```

Once you installed a package, you can start using its functions by
*loading* the package with the function `library()`. By the way, when
working on an Rmd file that uses functions from a given package, you
MUST include a code chunk with the `library()` command.

``` r
# (this command can be included in an Rmd file)
library(knitr)
```

```{r}

```

```{python}
print("hello world")
```
